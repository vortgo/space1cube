#include "matrix.h"
#include "logger.h"
#include "matrix_setup.h"
#include <unordered_map>
#include <array>
#include <string>
#include <vector>

using Pattern = std::array<uint8_t, 7>;

std::vector<Matrix> matrices;
Adafruit_NeoPixel displays[NUM_MATRICES] = {
    Adafruit_NeoPixel(NUM_LEDS, PIN_1, NEO_GRB + NEO_KHZ800),
    Adafruit_NeoPixel(NUM_LEDS, PIN_2, NEO_GRB + NEO_KHZ800),
    Adafruit_NeoPixel(NUM_LEDS, PIN_3, NEO_GRB + NEO_KHZ800),
    Adafruit_NeoPixel(NUM_LEDS, PIN_4, NEO_GRB + NEO_KHZ800),
    Adafruit_NeoPixel(NUM_LEDS, PIN_5, NEO_GRB + NEO_KHZ800),
    Adafruit_NeoPixel(NUM_LEDS, PIN_6, NEO_GRB + NEO_KHZ800)};

void initMatrices()
{
// Инициализация матриц
for (int i = 0; i < NUM_MATRICES; ++i)
{
    matrices.push_back(Matrix(displays[i], WIDTH, HEIGHT));
}

    //    matrices[0].display.setPixelColor(3, matrices[0].display.gamma32(0x004CFF));
    //    matrices[0].display.show();


    //    matrices[2].display.setPixelColor(2, matrices[2].display.gamma32(0x004CFF));
    //    matrices[2].display.show();

    //    matrices[3].display.setPixelColor(2, matrices[3].display.gamma32(0x004CFF));
    //    matrices[3].display.show();
}

Matrix::Matrix(Adafruit_NeoPixel &display, uint8_t width, uint8_t height)
    : display(display), width(width), height(height)
{
    display.begin(); 
    clear();
}

void Matrix::setPixel(uint8_t x, uint8_t y, uint32_t color, uint8_t brightness) {
    if (x < width && y < height) {
        uint16_t index = getIndex(x, y);
        uint8_t r = (color >> 16) & 0xFF;
        uint8_t g = (color >> 8) & 0xFF;
        uint8_t b = color & 0xFF;
        r = (r * brightness) / 255;
        g = (g * brightness) / 255;
        b = (b * brightness) / 255;
        display.setPixelColor(index, display.Color(r, g, b));
    }
}

void Matrix::drawCharacter(const std::string &character, uint32_t color)
{
    clear();

    int colOffset = 1;
    int rowOffset = 1;

    auto it = charPatterns.find(character);
    if (it == charPatterns.end())
    {
        std::string message = "Символ отсутствует в алфавите: " + character;
        logger.println(message.c_str());
        return;
    }

    const Pattern &charPattern = it->second;
    for (int r = 0; r < 7; r++)
    {
        uint8_t rowPattern = charPattern[r];
        for (int c = 0; c < 5; c++)
        {
            if (rowPattern & (1 << (4 - c)))
            {
                int x = c + colOffset;
                int y = r + rowOffset;
                int index = y * width + x;
                if (index < width * height)
                {
                    setPixel(x, y, color);
                }
            }
        }
    }
    show();
}

uint16_t Matrix::getIndex(uint8_t x, uint8_t y)
{
    return y * width + x;
}

const std::unordered_map<std::string, Pattern> charPatterns = {
    // Цифры (0-9)
    {"0", {0x0E, 0x11, 0x19, 0x15, 0x13, 0x11, 0x0E}},
    {"1", {0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E}},
    {"2", {0x1E, 0x11, 0x01, 0x0E, 0x10, 0x10, 0x1F}},
    {"3", {0x1E, 0x01, 0x01, 0x0E, 0x01, 0x01, 0x1E}},
    {"4", {0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02}},
    {"5", {0x1F, 0x10, 0x1F, 0x01, 0x01, 0x11, 0x0E}},
    {"6", {0x0E, 0x10, 0x1E, 0x11, 0x11, 0x11, 0x0E}},
    {"7", {0x1F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08}},
    {"8", {0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E}},
    {"9", {0x0E, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x0E}},

    // Английский алфавит (A-Z)
    {"A", {0x0E, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11}},
    {"B", {0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E}},
    {"C", {0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E}},
    {"D", {0x1E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E}},
    {"E", {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F}},
    {"F", {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10}},
    {"G", {0x0E, 0x11, 0x10, 0x13, 0x11, 0x11, 0x0E}},
    {"H", {0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11}},
    {"I", {0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E}},
    {"J", {0x07, 0x02, 0x02, 0x02, 0x12, 0x12, 0x0C}},
    {"K", {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11}},
    {"L", {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F}},
    {"M", {0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11}},
    {"N", {0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x11}},
    {"O", {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}},
    {"P", {0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10}},
    {"Q", {0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0D}},
    {"R", {0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11}},
    {"S", {0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E}},
    {"T", {0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04}},
    {"U", {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}},
    {"V", {0x11, 0x11, 0x11, 0x11, 0x0A, 0x0A, 0x04}},
    {"W", {0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11}},
    {"X", {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11}},
    {"Y", {0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x04}},
    {"Z", {0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F}},

    // Русский алфавит (А-Я, Ё)
    {"А", {0x0E, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11}},
    {"Б", {0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E}},
    {"В", {0x1F, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1F}},
    {"Г", {0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10}},
    {"Д", {0x0E, 0x15, 0x15, 0x1F, 0x15, 0x15, 0x15}},
    {"Е", {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F}},
    {"Ё", {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F}},
    {"Ж", {0x15, 0x15, 0x0E, 0x1F, 0x0E, 0x15, 0x15}},
    {"З", {0x1E, 0x11, 0x01, 0x06, 0x01, 0x11, 0x1E}},
    {"И", {0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11}},
    {"Й", {0x11, 0x13, 0x15, 0x19, 0x11, 0x11, 0x11}},
    {"К", {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11}},
    {"Л", {0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x0E}},
    {"М", {0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11}},
    {"Н", {0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11}},
    {"О", {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}},
    {"П", {0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11}},
    {"Р", {0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10}},
    {"С", {0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E}},
    {"Т", {0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04}},
    {"У", {0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x04}},
    {"Ф", {0x04, 0x1F, 0x15, 0x1F, 0x15, 0x1F, 0x04}},
    {"Х", {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11}},
    {"Ц", {0x11, 0x11, 0x11, 0x11, 0x1F, 0x01, 0x01}},
    {"Ч", {0x11, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x01}},
    {"Ш", {0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x1F}},
    {"Щ", {0x15, 0x15, 0x15, 0x15, 0x15, 0x1F, 0x01}},
    {"Ъ", {0x18, 0x08, 0x0E, 0x09, 0x09, 0x09, 0x09}},
    {"Ы", {0x11, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E}},
    {"Ь", {0x10, 0x10, 0x1E, 0x11, 0x11, 0x11, 0x0E}},
    {"Э", {0x0E, 0x11, 0x01, 0x07, 0x01, 0x11, 0x0E}},
    {"Ю", {0x11, 0x15, 0x15, 0x1D, 0x15, 0x15, 0x11}},
    {"Я", {0x0E, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x0E}},

    // Спецсимволы
    {"@", {0x0E, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0F}},
    {"$", {0x04, 0x0E, 0x14, 0x0E, 0x05, 0x0E, 0x04}},
    {"&", {0x06, 0x09, 0x05, 0x02, 0x15, 0x09, 0x16}},
    {"(", {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02}},
    {")", {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08}},
    {"[", {0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E}},
    {"]", {0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E}},
    {"{", {0x06, 0x04, 0x04, 0x08, 0x04, 0x04, 0x06}},
    {"}", {0x0C, 0x04, 0x04, 0x02, 0x04, 0x04, 0x0C}},
    {":", {0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00}},
    {";", {0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08}},
    {"'", {0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00}},
    {"!", {0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04}},
    {"?", {0x0E, 0x11, 0x01, 0x06, 0x04, 0x00, 0x04}},
    {"#", {0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A}},
    {"%", {0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03}},
    {"*", {0x04, 0x15, 0x0E, 0x04, 0x0E, 0x15, 0x04}},
    {"+", {0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00}},
    {"-", {0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00}},
    {"/", {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40}},
    {"^", {0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00}},
    {"_", {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F}},
    {"=", {0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00}}};
